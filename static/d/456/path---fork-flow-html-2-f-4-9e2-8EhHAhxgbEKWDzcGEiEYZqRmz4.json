{"data":{"markdownRemark":{"html":"<p>Github 是目前世界上最大的开源项目的托管交流平台。<a href=\"https://opensource.guide/how-to-contribute/\">贡献开源项目</a>的流程也是 Github 全力支持的，也一样是遵循 Github Flow，虽然跟前面团队合作流程会有一点差别。在团队内部，大家都是有写权限的。但是网上的开源项目参与者众多。如果你一上去就跟项目的拥有者说，Hey，你给我加个写权限吧，别逗了，人家也不认识你，怎么可能呢？</p>\n<h2 id=\"fork\"><a href=\"#fork\" aria-label=\"fork permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Fork</h2>\n<p>所以第一步是 Fork 这个项目。所谓我 fork 别人的一个项目，就是指做一个把这个项目做一个拷贝，放到我自己的账户下。</p>\n<p><img src=\"https://img.haoqicat.com/2019031701.jpg\"></p>\n<p>基于 fork 的整个的流程就是上图展示的思路。第一步，先 fork，这样我就有了 happypeter/TLCL 这个项目了，那既然是我自己的项目，我就可以把它 clone 到我本地，做修改，然后推送到 github 上的我自己的那个 fork 之中。这样我把我自己的 fork 跟上游的仓库，也就是 billie66 名下的仓库来进行对比，就可以发出 Pull Request 了。</p>\n<p>下面来实际操作。</p>\n<p>来到 TLCL 的项目主页，也就是 <a href=\"https://github.com/billie66/TLCL\">https://github.com/billie66/TLCL</a> 。点右上角的 fork 按钮。</p>\n<p><img src=\"https://img.haoqicat.com/2019031702.jpg\"></p>\n<p>这样，我自己的名下就多了一个 TLCL 项目，这个项目就叫做原项目的一个 fork 。</p>\n<p><img src=\"https://img.haoqicat.com/2019031703.jpg\"></p>\n<p>到这里 fork 这一步就结束了。那对于 happypeter/TLCL 这个仓库，我当然有修改的权限了，可以在网页上修改直接发 PR。不过一般我会 clone 到本地客户端中，在本地作修改，点右下角的 <code>Clone In Desktop</code> 按钮，来把项目 clone 到本地。</p>\n<p><img src=\"https://img.haoqicat.com/2019031704.jpg\"></p>\n<h2 id=\"做版本和同步\"><a href=\"#%E5%81%9A%E7%89%88%E6%9C%AC%E5%92%8C%E5%90%8C%E6%AD%A5\" aria-label=\"做版本和同步 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>做版本和同步</h2>\n<p>区别于团队合作的 <a href=\"http://gitbeijing.com/flow/\">Github Flow</a>，这里主要是没有开新分支，而是创建了一个新的 fork。上游仓库 billie66/TLCL 中代码是在 gh-pages 分支上，那现在我在本地的 gh-pages 修改，新版本同步到在 happypeter/TLCL 的 gh-pages 上就可以了。</p>\n<p>本地修改，做 commit，然后同步到远端的 happypeter/TLCL 中，这些步骤到现在应该是轻车熟路，小菜一碟了。于是到 github.com 可以看到下图的内容。</p>\n<p><img src=\"https://img.haoqicat.com/2019031705.jpg\"></p>\n<p>如上图所示到 happypeter/TLCL 的仓库主页，可以看到最新的我做的版本的留言，点开就可以看到我这次修改的内容，现在可以来发 PR 了。</p>\n<h2 id=\"发-pr-和代码审核\"><a href=\"#%E5%8F%91-pr-%E5%92%8C%E4%BB%A3%E7%A0%81%E5%AE%A1%E6%A0%B8\" aria-label=\"发 pr 和代码审核 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>发 PR 和代码审核</h2>\n<p>发 PR 的过程跟前面介绍过的没有本质区别。点一下 <code>Pull Request</code> 链接，到达的页面中会有一个大大的绿按钮 <code>New Pull Request</code>，点一下就看到新建 PR 的页面。</p>\n<p><img src=\"https://img.haoqicat.com/2019031706.jpg\"></p>\n<p>注意图中 1 处，要选对是哪两个分支进行对比，左侧是上游分支，也就是“目的地”分支，右侧是我自己的分支，有修改的内容。有时候 github 能猜对拿哪两个分支做对比，有时候就要自己手动选择一下。下面就可以点按钮来发 PR 了。之后，在 billie66/TLCL 下面，注意不是 happypeter/TLCL 下面，就会看到这个 PR 。</p>\n<p><img src=\"https://img.haoqicat.com/2019031707.jpg\"></p>\n<p>这样，我这次贡献代码的工作就结束了。TLCL 的版本历史中会永远留下 happypeter 的名字。同时我发的这个 PR 关掉之后，也可以在 billie66/TLCL 的 Pull Requests 一项下面被永久保存，所以我可以放心的删除我自己的那个 fork 了。</p>\n<h2 id=\"基于-fork-的快速-pr\"><a href=\"#%E5%9F%BA%E4%BA%8E-fork-%E7%9A%84%E5%BF%AB%E9%80%9F-pr\" aria-label=\"基于 fork 的快速 pr permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>基于 fork 的快速 PR</h2>\n<p>前面介绍过<a href=\"https://github.com/blog/1945-quick-pull-requests\">快速 PR</a>了，不过那个流程是基于一个我自己有写权限的项目。那对于人家的开源项目，我根本就不能修改，能不用在网页上直接发开速 PR 呢？幸运的是，答案是肯定的。而且过程是超级的简单和直观。</p>\n<p>做法就是，我来到 bille66/TLCL 的这个项目，不做 fork，而是直接打开一个我想要编辑的文件，修改，然后做 commit 的时候点 'Propose file change`。</p>\n<p><img src=\"https://img.haoqicat.com/2019031708.jpg\"></p>\n<p>这样，github 会自动帮我 fork 一个 happypeter/TLCL 出来，把我所做的改动 commit 到我自己的这个 fork 中。这之后，就直接进入发 PR 的界面，操作就和前面的过程一样了。</p>\n<h2 id=\"总结\"><a href=\"#%E6%80%BB%E7%BB%93\" aria-label=\"总结 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>总结</h2>\n<p>贡献开源项目，过程中可以跟老手讨论，所以是个学习编程的好方法。</p>","fields":{"slug":"/fork_flow/"}},"indexJson":{"articles":[{"link":"introduction.html","title":"简介"},{"link":"github_in_browser.html","title":"浏览器中使用 GitHub"},{"link":"github_for_mac.html","title":"GitHub For Mac 客户端"},{"link":"simple_branching.html","title":"简单分支操作"},{"link":"merge.html","title":"合并分支"},{"link":"github_flow.html","title":"团队协作流程"},{"link":"fork_flow.html","title":"开源项目贡献流程"},{"link":"issues.html","title":"GitHub Issues"},{"link":"pages.html","title":"GitHub Pages 搭建网站"},{"link":"more.html","title":"更多 GitHub 技巧"}]}},"pageContext":{"slug":"/fork_flow/"}}