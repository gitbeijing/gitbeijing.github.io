{"data":{"markdownRemark":{"html":"<p>新的一天开始。比如昨天我在一个 idea 分支上实现了一个想法，实际测试之后发现代码没有问题。那么今天我们要做的就是让这两个分支合并，或者说的具体一些，就是把 idea 分支的新代码融合（ merge ）到 master 分支，因为 master 分支才是最终会被上线的分支。</p>\n<h2 id=\"通过发-pull-request-来合并分支\"><a href=\"#%E9%80%9A%E8%BF%87%E5%8F%91-pull-request-%E6%9D%A5%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF\" aria-label=\"通过发 pull request 来合并分支 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>通过发 Pull Request 来合并分支</h2>\n<p>合并同一个仓库中的两个分支，其实可以用一个命令搞定，但是现在我们先来看看在 github 网站上如何来进行这个操作，过程中会涉及到一个 Pull Request 的概念。</p>\n<p>最初项目只有一个 master 分支，我后来又新建一个 idea 分支，添加了一行代码，commit 一下。那现在仓库内的情况就是，idea 分支比 master 分支多一个 commit 。</p>\n<p><img src=\"https://img.haoqicat.com/2019031511.jpg\"></p>\n<p>那如何让 idea 的代码 merge 到 master 呢？首先要把 idea 分支 Push 到远端仓库中，这个前一节已经介绍过了。</p>\n<p><img src=\"https://img.haoqicat.com/2019031512.jpg\"></p>\n<p>到 github.com 上的项目主页，首先切换到 idea 分支，然后点 <code>New pull request</code> 按钮，来创建一个先的 Pull Request 。Pull Request 翻译过来叫“拉取请求”，意思是请求 master 分支去把 idea 分支的代码拉取到 master 之上。</p>\n<p><img src=\"https://img.haoqicat.com/2019031513.jpg\"></p>\n<p>接下来就进入了创建这个 Pull Request 的界面，可以看到，绿色的 <code>Able To Merge</code> 字样，代码 idea 上的修改跟 master 分支上没有冲突，可以直接融合。关于代码冲突，稍后我们会有进一步的介绍。下面可以看到有 input 和 text area 区域，可以去填写本次 Pull Request 的理由，也就是要解释给 master 分支的维护者，要拉取的这些修改内容都实现了那些有意义的功能。大绿按钮就是创建 Pull Request ，但是创建之前还可以看一下最底部的这些内容，也就是此次 Pull Request 中有包含了哪些代码的改动。</p>\n<p><img src=\"https://img.haoqicat.com/2019031514.jpg\"></p>\n<p>Master 分支的维护者将会看到这个 Pull Request 的详细内容，审核无误后，就可以点一下 <code>Merge Pull Request</code> ，来把 idea 分支的内容 merge 进 master 分支了。</p>\n<p><img src=\"https://img.haoqicat.com/2019031515.jpg\"></p>\n<p>通过查看 master 分支的历史线可以看到，不仅仅原来属于 idea 分支的 C3 现在到了 master 分支之上，另外， master 上还新生成了一个 <code>C4</code> ，这是一个特殊的 commit ，叫做“融合版本”（ Merge Commit ）。融合版本的特点是同时有两个 parent commit ，在合并分支的时候出现 merge commit 是非常正常的现象。</p>\n<p>分支合并之后， master 分支指针指向了 merge commit，也就自动拥有了 idea 分支上的 <code>C3</code> 这个版本了。idea 分支一般这会儿就可以删除了。</p>\n<h2 id=\"代码冲突-conflicts\"><a href=\"#%E4%BB%A3%E7%A0%81%E5%86%B2%E7%AA%81-conflicts\" aria-label=\"代码冲突 conflicts permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>代码冲突 conflicts</h2>\n<p>实际中经常有这样的情况，我正在 idea 分支上开发一个比较大的功能。但是这个时候突然发现了一个紧急的问题需要修复，所以我会直接到 master 分支上，做一个 commit 来解决这个紧急的问题。然后会来继续到 idea 上开发。</p>\n<p>其他的情形也有，总之这样就会出现，两个不同分支上并行开发，同时都有新的 commit ，这个一般没有问题，一样可以直接 merge 。</p>\n<p><img src=\"https://img.haoqicat.com/2019031516.jpg\"></p>\n<p>但是如果在两个分支上改动了同一个地方，合并的就会出现代码冲突。 因为 git 不知道该听哪个分支的，所以只能报出冲突的位置，让开发者手动解决。</p>\n<p>来具体操作一下。再次创建一个跟 master 拥有完全一样的历史的分支，名为 new-idea ，在这个分支上，改动 README 文件中的一行，改成 <code>AAA</code>，commit 一下。然后切换到 master 分支上，把这一行的内容改为 <code>BBB</code> ，也一样做 commit。再次重复之前的合并分支的操作。</p>\n<p>这样发 Pull Request 的时候，就会看到 <code>Can not Merge</code> 的警告，继续进行就可以进入手动解决冲突的界面。</p>\n<p><img src=\"https://img.haoqicat.com/2019031517.jpg\"></p>\n<p>这里我们以 master 分支的意见为最终意见，于是就可以直接删除图中红色框选内容即可。</p>\n<h2 id=\"合并远端分支\"><a href=\"#%E5%90%88%E5%B9%B6%E8%BF%9C%E7%AB%AF%E5%88%86%E6%94%AF\" aria-label=\"合并远端分支 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>合并远端分支</h2>\n<p>现在我本地仓库叫 GUI ，github.com 上托管了这个仓库，名字也叫 GUI 。那么自然就有本地一个 master 分支，和远端一个 master 分支，这两个分支虽然名字都叫 master，但是本质上也是两个分支，也存在分支合并的问题。</p>\n<p>比如这样，我在 github.com 网页上，修改一下项目，把修改内容 commit 到 master 分支之上。这样，远端的 master 就比我本地的 master 分支多了一个 commit。然后在本地修改一下 master 分支，也做一个 commit 。</p>\n<p><img src=\"https://img.haoqicat.com/2019031518.jpg\"></p>\n<p>也就是说本地和远端的同名分支之间也会一样存在合并以及解决冲突的各种情形，跟两个不同名分支之间的操作方式都是一样的。</p>\n<h2 id=\"总结\"><a href=\"#%E6%80%BB%E7%BB%93\" aria-label=\"总结 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>总结</h2>\n<p>前面学会了怎么开分支，今天又学会了怎么合并分支，那分支的基本操作就会了。后面就是在实际开发情形中运用了。\n合并分支除了融合（ merge ）还有另外一种形式叫“变基”（ rebase ）这里暂时用不上，先不管。</p>","fields":{"slug":"/merge/"}},"indexJson":{"articles":[{"link":"introduction.html","title":"简介"},{"link":"github_in_browser.html","title":"浏览器中使用 GitHub"},{"link":"github_for_mac.html","title":"GitHub For Mac 客户端"},{"link":"simple_branching.html","title":"简单分支操作"},{"link":"merge.html","title":"合并分支"},{"link":"github_flow.html","title":"团队协作流程"},{"link":"fork_flow.html","title":"开源项目贡献流程"},{"link":"issues.html","title":"GitHub Issues"},{"link":"pages.html","title":"GitHub Pages 搭建网站"},{"link":"more.html","title":"更多 GitHub 技巧"}]}},"pageContext":{"slug":"/merge/"}}