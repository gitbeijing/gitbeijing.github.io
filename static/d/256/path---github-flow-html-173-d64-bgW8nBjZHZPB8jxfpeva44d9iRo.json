{"data":{"markdownRemark":{"html":"<p>前几天还都是一个开发者唱独角戏。但是尽管如此也可以看出 git 带来的便利了，比如代码写错了可以回滚，为了新功能开发可以开新分支等等。但是 git 和 github 更大的威力在于协作，所以今天来聊团队协作流程。</p>\n<p>聊了这么多天的 github，有必要稍微停下来，再想想究竟什么是 github 。没错，前面的使用中也看到了，github 是 git 仓库的托管平台，让我们的项目仓库可以方便的备份同步。但是其实也许比这个还要重要的是，github 是一个大家一起协作做项目的平台，是一种开发者的工作方式，引导一种看着不像流程但是却真正健康轻便的开发流程。</p>\n<p>在 <a href=\"https://www.youtube.com/watch?v=qyz3jkOBbQY\">How Github Use Github To Build Github</a> 的演讲中，Zach Holman 说，</p>\n<blockquote>\n<p>多年来我一直在寻找做软件正确的方式，现在我想我找到了，github 就是这种方式。</p>\n</blockquote>\n<p>Github 多年来总结出来一套自己的团队协作流程，简单而且强大，叫做 <a href=\"https://guides.github.com/introduction/flow/index.html\">Github Flow</a> ，网站上的各个功能都是围绕着这个流程来开发的。</p>\n<p>要了解一个流程，没有什么比跑一个最简单的实际例子更好的方式了，官方给出的 <a href=\"https://guides.github.com/activities/hello-world/\">Hello World</a> 就是服务于这个目的，不过这个 Hello World 用的是纯粹的网页来实现整个流程。咱们今天用网页配合 Github For Mac 客户端来完成这个流程。</p>\n<h2 id=\"什么是-github-flow-？\"><a href=\"#%E4%BB%80%E4%B9%88%E6%98%AF-github-flow-%EF%BC%9F\" aria-label=\"什么是 github flow ？ permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>什么是 Github Flow ？</h2>\n<p>来理解一下什么是 Github Flow 。说白了，就是给一个项目开发新功能要走的几步。整个过程的核心是“拉取请求” 。</p>\n<p>第一步，创建新分支，用来开发这个新功能。如下图所示</p>\n<p><img src=\"https://img.haoqicat.com/2019031601.jpg\"></p>\n<p>第二步，不断实现功能，做成一个个新版本。</p>\n<p><img src=\"https://img.haoqicat.com/2019031602.jpg\"></p>\n<p>第三步，发起”拉取请求“（ Pull Request ），后面简称 PR 吧。</p>\n<p><img src=\"https://img.haoqicat.com/2019031603.jpg\"></p>\n<p>第四步，大家讨论。这是一个代码审核的过程。</p>\n<p><img src=\"https://img.haoqicat.com/2019031604.jpg\"></p>\n<p>第五步，部署代码。</p>\n<p><img src=\"https://img.haoqicat.com/2019031604.jpg\"></p>\n<p>第六步，把分支的内容合并到 master 。</p>\n<p><img src=\"https://img.haoqicat.com/2019031606.jpg\"></p>\n<p>这就是整个 Github Flow 的几个步骤了。</p>\n<h2 id=\"给队友添加写权限\"><a href=\"#%E7%BB%99%E9%98%9F%E5%8F%8B%E6%B7%BB%E5%8A%A0%E5%86%99%E6%9D%83%E9%99%90\" aria-label=\"给队友添加写权限 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>给队友添加写权限</h2>\n<p>接下来跑一个实际的例子。首先一步是给队友添加写权限，注意这里的讨论的是团队共同开发自己公司的项目，对于开源项目，是不必给贡献者添加写权限的，后续小节中会有专门介绍。</p>\n<p>现在我和 @billi66 要合作开发一个新项目。于是我就来创建这个项目，过程在<a href=\"github_in_browser\">浏览器中使用 Github</a>中已经介绍过了。下面就继续在 GUI 这个项目上做演示。</p>\n<p>现在我要把 @billi66 添加进来，让她也具有项目的修改权限了。如何来做呢？把她添加成项目的“协作者”（ collaborator ） 就行了。 </p>\n<p>首先到项目页面，点击 Settings 一项，可以看到 collaborators 选项，输入框中输入 <code>bi</code> 就可以自动补齐出 <code>billie66</code> 了</p>\n<p><img src=\"https://img.haoqicat.com/2019031607.jpg\"></p>\n<p>回车选中，然后点 <code>Add collaborator</code> 按钮，这样就完成了。</p>\n<h2 id=\"开话题分支并在上面开发\"><a href=\"#%E5%BC%80%E8%AF%9D%E9%A2%98%E5%88%86%E6%94%AF%E5%B9%B6%E5%9C%A8%E4%B8%8A%E9%9D%A2%E5%BC%80%E5%8F%91\" aria-label=\"开话题分支并在上面开发 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>开话题分支并在上面开发</h2>\n<p>现在我和 @billie66 都对项目有写权限，对于非常有把握的代码，可以直接在本地 master 开发然后 Push 到远端 master 分支上面。但是如果是比较重要的功能，还是要发单独开”话题分支“（ Topic Branch ），这是后面发 PR 的前提。</p>\n<p>尽管所有的流程操作都可以在<a href=\"https://github.com/blog/1557-github-flow-in-the-browser\">浏览器中完成</a>。但是更为常见的情形是我和 @billie 会把代码 clone 到本地来进行新功能的开发，因为这样可以使用自己的编辑器以及测试工具。</p>\n<p>现在我要对项目开发一个很大很大的功能，所以就先来开一个分支叫做 <code>describe-project</code> 。名字是越清楚越好的，这样队友比较能一眼看出我在干什么。注意开新分支一定要在刚刚更新过的 master 的基础上开。开好之后把这个分支发布到远端，以后这个分支上每次实现一点小功能就 push 到远端，这样的好处是队友可以随时看到我的进展。这部分的操作前面<a href=\"github_for_mac.html\">客户端使用</a>中都介绍了。</p>\n<p>这样我做了两个版本，而且都同步到远端仓库了。所以到 <code>describe-project</code> 分支的历史上可以看到多了下面两个新 commit 。然后就可以到项目主页，选中 <code>describe-project</code> 分支，来给 master 分支发 Pull Request 了。具体过程之前我们已经介绍过了，这里不再重复。</p>\n<h2 id=\"讨论审核代码\"><a href=\"#%E8%AE%A8%E8%AE%BA%E5%AE%A1%E6%A0%B8%E4%BB%A3%E7%A0%81\" aria-label=\"讨论审核代码 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>讨论审核代码</h2>\n<p>这样，master 的维护者就可以就这个 Pull Request 来进行讨论和代码审核了。不一定是一个老大审核小弟们的代码，可以是队友之间的互相审核。</p>\n<p>@billie66 看到这个 PR 之后，就会发表她的意见了。如果我看到之后觉得有道理，代码需要调整，那我现在是不是要撤销这 PR 重新发呢？不用。我只需要继续在 <code>describe-project</code> 分支上改代码然后再同步上来。</p>\n<p><img src=\"https://img.haoqicat.com/2019031608.jpg\"></p>\n<p>Pull Request 讨论不断继续，会形成一条由评论和代码穿插而成的线。最后达成一致，我或者 @billie 其中之一可以点一下上面的大大的 <code>Merge Pull Request</code> （ 融合拉取请求 ）的按钮，这样话题分支上的代码就合并到 master 之上了。接下来 <code>describe-project</code> 这个话题分支也就可以删掉，然后关闭这个 PR 了。</p>\n<h2 id=\"快速-pr\"><a href=\"#%E5%BF%AB%E9%80%9F-pr\" aria-label=\"快速 pr permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>快速 PR</h2>\n<p>走一遍 Github Flow 方式并不唯一。前面讨论的，在自己的机器上改代码，用客户端作 commit，然后在网页上发 PR 是一种常见的方式。如果我只是改一个文件中的一个小地方，完全可以使用 github 网页功能提供的<a href=\"https://github.com/blog/1945-quick-pull-requests\">快速 PR</a>这种方法。来演示一下。</p>\n<p>网页界面中，找到我要修改的文件，点击 <code>edit</code>，修改一下文件内容，然后在下面的界面中，可以直接填写一个 Topic 分支名，创建这个分支，并 commit 到这个分支上发 PR 了。</p>\n<p><img src=\"https://img.haoqicat.com/2019031609.jpg\"></p>\n<p>如果只是一个小改动，即使是对于老手，切换到编辑器和客户端，再跑一遍整个的这个发 PR 的流程，我也会觉得挺麻烦的。快速 PR 方法真的是非常方便。</p>\n<h2 id=\"总结\"><a href=\"#%E6%80%BB%E7%BB%93\" aria-label=\"总结 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>总结</h2>\n<p>其实，每一个打开的 PR 都很类似于后面我们要讲的 Issue （ 事务卡片 )，比如二者都可以用 Markdown 格式来写评论。这些技巧会在 Issue 相关的那一部分来介绍。</p>","fields":{"slug":"/github_flow/"}},"indexJson":{"articles":[{"link":"introduction.html","title":"简介"},{"link":"github_in_browser.html","title":"浏览器中使用 GitHub"},{"link":"github_for_mac.html","title":"GitHub For Mac 客户端"},{"link":"simple_branching.html","title":"简单分支操作"},{"link":"merge.html","title":"合并分支"},{"link":"github_flow.html","title":"团队协作流程"},{"link":"fork_flow.html","title":"开源项目贡献流程"},{"link":"issues.html","title":"GitHub Issues"},{"link":"pages.html","title":"GitHub Pages 搭建网站"},{"link":"more.html","title":"更多 GitHub 技巧"}]}},"pageContext":{"slug":"/github_flow/"}}