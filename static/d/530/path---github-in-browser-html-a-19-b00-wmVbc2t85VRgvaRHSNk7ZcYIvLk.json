{"data":{"markdownRemark":{"html":"<p>今天 Peter 来带你做一件曾经改变我生活的事情，就是注册并使用 github.com 。不会用 git ，就不能用 github 吗? 不是这样的。Github 的网站上通过网页操作就已经能实现很多强大的版本控制功能了，来一起看一看。</p>\n<h3>故事从注册开始</h3>\n<p>来到 <a href=\"http://github.com\">http://github.com</a> 的首页，就可以看到下面的注册界面：</p>\n<p><img src=\"https://github.com/happypeter/gitbeijing/blob/master/data/posts/images/github_in_browser/signup.png?raw=true\"></p>\n<p>填写自己的用户名邮箱，再设置一个妥妥的密码，点击 <code>Sign up for Github</code> 按钮，世界就属于你了。对于开源项目 github 是免费的，所以不用管付费相关的内容。接下来初次注册的用户会看到一共四步的 github 使用教程。</p>\n<p><img src=\"https://github.com/happypeter/gitbeijing/blob/master/data/posts/images/github_in_browser/help4steps.png?raw=true\"></p>\n<p>今天主要介绍第二步，其他几步回头另行介绍。所以这个四步走，稍微看一下，关了就行了。以后可以到 <a href=\"http://help.github.com\">http://help.github.com</a> 找到这些内容。另外你可能还会看到要求新用户去验证一下邮箱地址的提示，这个简单，到邮箱之中找到验证邮件，点一下里面的链接就可以了。</p>\n<p>最后一步来给自己添加一个头像吧，github 是一个真正的交朋友的地方，每次你发评论或者写代码都是代表一个活生生的人格。</p>\n<p><img src=\"https://github.com/happypeter/gitbeijing/blob/master/data/posts/images/github_in_browser/set_avatar.png?raw=true\"></p>\n<p>如上图，登录后的用户都可以在 1 处找到”设置“的图标，一个小齿轮，点一下，默认看到的就是 2 处的 <code>Profile</code> （个人信息），到 3 处选择图片上传就可以了。</p>\n<h3>创建项目仓库</h3>\n<p>Github 上操作虽多，但是都是围绕一个个的项目展开的。</p>\n<p>一个项目其实就是一个文件夹，里面放着所有的项目文件，可以是代码，也可以是任意的文档。但是在 github 这里，每一个项目都不仅仅是最新版本的代码，还保持着所有的历史版本和修改记录，当然这个后台就是通过 Git 来实现的。Github 上的项目有一个新名称，叫 ”仓库“ ( repository )。说白了，一个仓库就是一个用 git 进行了版本控制的项目。</p>\n<p>点一下页面左上角的小猫图标，就可以到达 dashboard （控制面板），这个词本来的意思是汽车上的仪表板，日常所有的操作都在这里做。</p>\n<p><img src=\"https://github.com/happypeter/gitbeijing/blob/master/data/posts/images/github_in_browser/dashboard.png?raw=true\"></p>\n<p>上图左侧，图标 1 处，可以看到相关项目的最近更新，右侧图标 2 处，是我自己的项目列表。现在我要创建一个项目，要点 3 处这个按钮。</p>\n<p><img src=\"https://github.com/happypeter/gitbeijing/blob/master/data/posts/images/github_in_browser/github_dashboard.png?raw=true\"></p>\n<p>这就到达了新建项目的页面：</p>\n<p><img src=\"https://github.com/happypeter/gitbeijing/blob/master/data/posts/images/github_in_browser/new_project.png?raw=true\"></p>\n<p>注意要勾选 <code>Initialize this repository with a README</code> ，然后创建这个项目。也会看到 <code>Create Repository</code> 按钮的上方还有两个选择框，一个是关于 <code>.gitignore</code> 的，另一个是关于 <code>LICENSE</code> 的。这两项如果选择了就是在项目中又多了两个文本文件，一个是 .gitignore 文件，另一个是 LICENSE 文件，暂时都不选就可以，回头需要了可以自己用编辑器新建。</p>\n<h3>编辑项目</h3>\n<p>创建项目完成后，就会跳转到 <a href=\"https://github.com/happypeter/coco\">https://github.com/happypeter/coco</a> 这个页面。这里的几乎每一个可以点的地方都会涉及到一个新概念，不用着急，后面咱们都会介绍到。先来瞄准一个最为重要的，叫 commit，如图中所指：</p>\n<p><img src=\"https://github.com/happypeter/gitbeijing/blob/master/data/posts/images/github_in_browser/show_commit.png?raw=true\"></p>\n<p>每次项目修改后，点击 <code>commit</code> 按钮就可以生成一个新的版本。commit 英文的基本意思是执行某个重要的事情，例如 commit suicide，自我了断。但是在 git 这里，做动词讲的时候是保存版本，当名词讲就是版本。</p>\n<p>现在就来编辑一下。点击上面图中，项目名 <code>coco</code> 右侧的加号，进入下面界面。</p>\n<p><img src=\"https://github.com/happypeter/gitbeijing/blob/master/data/posts/images/github_in_browser/add_new_file.png?raw=true\"></p>\n<p>来新建一个文件叫 <code>love.md</code>，在标号 1 处。填写文件内容，标号 2 处。下面 <code>Commit new file</code> 部分填写的是“版本留言”（ commit message ），说明一下为什么要做这次修改，一方面是跟队友沟通的一种形式，另一方面如果项目版本多了，自己也可以用这个留言来定位特定的一次修改。标号 3 处填写一个一行的留言，标号 4 处可以写详细留言，这一项是可选的。最后，点击 <code>Commit new file</code> 按钮，一个新版本就做好了。</p>\n<p>顺便提一下，github 的页面编辑器是经过特殊强化的，用起来非常舒服。点下图 1 处，可以进入全屏模式，编辑后还可以用 2 处的 <code>Preview changes</code> 预览一下修改内容。</p>\n<p><img src=\"https://github.com/happypeter/gitbeijing/blob/master/data/posts/images/github_in_browser/github_editor.png?raw=true\"></p>\n<p>自动跳转回项目页面之后，会发现原来 <code>1 commit</code> 的地方，现在已经变成了下图所示的 <code>2 commits</code></p>\n<p><img src=\"https://github.com/happypeter/gitbeijing/blob/master/data/posts/images/github_in_browser/2_commits.png?raw=true\"></p>\n<p><code>2 commits</code> 是个链接，点进入就进入了项目历史的页面。</p>\n<p><img src=\"https://github.com/happypeter/gitbeijing/blob/master/data/posts/images/github_in_browser/history_view.png?raw=true\"></p>\n<p>现在看到历史上有两个版本，点开上面的一个版本，或者说一个 commit，就可以看到一个 commit 所包含的信息了。</p>\n<p><img src=\"https://github.com/happypeter/gitbeijing/blob/master/data/posts/images/github_in_browser/4w_commit.png?raw=true\"></p>\n<p>最重要的是 <code>版本号</code> （ commit id ）。每个 commit 都有一个，是一个 40 位 16 进制数，可以用来定位每个版本。注意一下地址栏中 url 的格式，以后只要是拿到了一个版本号，就可以照猫画虎的敲上面这样的链接来查看这次的修改的详细内容了，方便吧？！</p>\n<p>一个 commit （版本）中最核心的内容就是这 4 个 <code>w</code> 了，谁（ who ）在什么时间（ when ）改了那些内容（ what ），最后一个是为什么要改（ why ），这个是版本留言发挥的作用。</p>\n<h3>一条历史线</h3>\n<p>所有 commit（版本) 组成了一条历史线。那么这条线是怎么串起来的呢？随便打开一个项目，打开具体一个 commit，通常会看到下图的内容：</p>\n<p><img src=\"https://github.com/happypeter/gitbeijing/blob/master/data/posts/images/github_in_browser/parent.png?raw=true\"></p>\n<p>上面显示了当前版本号（ commit id ），但是同时还显示了它之前的一个 commit 的版本号，也就是它的“父版本”（ parent ） 的版本号。底层原理是这样，一个 commit 内部是保存了它的 parent 的版本号的，这样就把它和它爹连在了一起，爹还有自己的爹，就会形成下图的一条历史线。</p>\n<p><img src=\"https://github.com/happypeter/gitbeijing/blob/master/data/posts/images/github_in_browser/history_line.png?raw=true\"></p>\n<p>有些版本工具是以 1，2，3... 作为版本号的，但是 git 这里每个版本号都是 40 位十六进制数，表面看起来稍微麻烦一些，但是实际上妙用无穷。</p>\n<h3>总结</h3>\n<p>Github 的功能还有很多，暂时只是介绍了最为核心的版本控制功能的一部分，更多强大的功能，后面介绍。</p>","fields":{"slug":"/github_in_browser/"}},"indexJson":{"articles":[{"link":"introduction.html","title":"简介"},{"link":"github_in_browser.html","title":"浏览器中使用 GitHub"},{"link":"github_for_mac.html","title":"GitHub For Mac 客户端"},{"link":"simple_branching.html","title":"简单分支操作"},{"link":"merge.html","title":"合并分支"},{"link":"github_flow.html","title":"团队协作流程"},{"link":"fork_flow.html","title":"开源项目贡献流程"},{"link":"issues.html","title":"GitHub Issues"},{"link":"pages.html","title":"GitHub Pages 搭建网站"},{"link":"more.html","title":"更多 GitHub 技巧"}]}},"pageContext":{"slug":"/github_in_browser/"}}